# This file is automatically generated.
# It should not be directly modified.

from numpy import conjugate as conj


def LINEAR_VIS_I(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      -gp00 * v01 * conj(gq01)
      + gp00 * v11 * conj(gq00)
      + gp01 * v00 * conj(gq01)
      - gp01 * v10 * conj(gq00)
      - gp10 * v01 * conj(gq11)
      + gp10 * v11 * conj(gq10)
      + gp11 * v00 * conj(gq11)
      - gp11 * v10 * conj(gq10)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def LINEAR_VIS_Q(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      gp00 * v01 * conj(gq01)
      - gp00 * v11 * conj(gq00)
      - gp01 * v00 * conj(gq01)
      + gp01 * v10 * conj(gq00)
      - gp10 * v01 * conj(gq11)
      + gp10 * v11 * conj(gq10)
      + gp11 * v00 * conj(gq11)
      - gp11 * v10 * conj(gq10)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def LINEAR_VIS_U(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      gp00 * v01 * conj(gq11)
      - gp00 * v11 * conj(gq10)
      - gp01 * v00 * conj(gq11)
      + gp01 * v10 * conj(gq10)
      + gp10 * v01 * conj(gq01)
      - gp10 * v11 * conj(gq00)
      - gp11 * v00 * conj(gq01)
      + gp11 * v10 * conj(gq00)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def LINEAR_VIS_V(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * 1j
    * (
      gp00 * v01 * conj(gq11)
      - gp00 * v11 * conj(gq10)
      - gp01 * v00 * conj(gq11)
      + gp01 * v10 * conj(gq10)
      - gp10 * v01 * conj(gq01)
      + gp10 * v11 * conj(gq00)
      + gp11 * v00 * conj(gq01)
      - gp11 * v10 * conj(gq00)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def LINEAR_WEIGHT_I(w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    gp00 * w00 * (gq00 * conj(gp00) + gq10 * conj(gp10)) * conj(gq00)
    + gp00 * w01 * (gq01 * conj(gp00) + gq11 * conj(gp10)) * conj(gq01)
    + gp01 * w10 * (gq00 * conj(gp01) + gq10 * conj(gp11)) * conj(gq00)
    + gp01 * w11 * (gq01 * conj(gp01) + gq11 * conj(gp11)) * conj(gq01)
    + gp10 * w00 * (gq00 * conj(gp00) + gq10 * conj(gp10)) * conj(gq10)
    + gp10 * w01 * (gq01 * conj(gp00) + gq11 * conj(gp10)) * conj(gq11)
    + gp11 * w10 * (gq00 * conj(gp01) + gq10 * conj(gp11)) * conj(gq10)
    + gp11 * w11 * (gq01 * conj(gp01) + gq11 * conj(gp11)) * conj(gq11)
  ).real


def LINEAR_WEIGHT_Q(w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    gp00 * w00 * (gq00 * conj(gp00) - gq10 * conj(gp10)) * conj(gq00)
    + gp00 * w01 * (gq01 * conj(gp00) - gq11 * conj(gp10)) * conj(gq01)
    + gp01 * w10 * (gq00 * conj(gp01) - gq10 * conj(gp11)) * conj(gq00)
    + gp01 * w11 * (gq01 * conj(gp01) - gq11 * conj(gp11)) * conj(gq01)
    - gp10 * w00 * (gq00 * conj(gp00) - gq10 * conj(gp10)) * conj(gq10)
    - gp10 * w01 * (gq01 * conj(gp00) - gq11 * conj(gp10)) * conj(gq11)
    - gp11 * w10 * (gq00 * conj(gp01) - gq10 * conj(gp11)) * conj(gq10)
    - gp11 * w11 * (gq01 * conj(gp01) - gq11 * conj(gp11)) * conj(gq11)
  ).real


def LINEAR_WEIGHT_U(w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    gp00 * w00 * (gq00 * conj(gp10) + gq10 * conj(gp00)) * conj(gq10)
    + gp00 * w01 * (gq01 * conj(gp10) + gq11 * conj(gp00)) * conj(gq11)
    + gp01 * w10 * (gq00 * conj(gp11) + gq10 * conj(gp01)) * conj(gq10)
    + gp01 * w11 * (gq01 * conj(gp11) + gq11 * conj(gp01)) * conj(gq11)
    + gp10 * w00 * (gq00 * conj(gp10) + gq10 * conj(gp00)) * conj(gq00)
    + gp10 * w01 * (gq01 * conj(gp10) + gq11 * conj(gp00)) * conj(gq01)
    + gp11 * w10 * (gq00 * conj(gp11) + gq10 * conj(gp01)) * conj(gq00)
    + gp11 * w11 * (gq01 * conj(gp11) + gq11 * conj(gp01)) * conj(gq01)
  ).real


def LINEAR_WEIGHT_V(w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    -gp00 * w00 * (gq00 * conj(gp10) - gq10 * conj(gp00)) * conj(gq10)
    - gp00 * w01 * (gq01 * conj(gp10) - gq11 * conj(gp00)) * conj(gq11)
    - gp01 * w10 * (gq00 * conj(gp11) - gq10 * conj(gp01)) * conj(gq10)
    - gp01 * w11 * (gq01 * conj(gp11) - gq11 * conj(gp01)) * conj(gq11)
    + gp10 * w00 * (gq00 * conj(gp10) - gq10 * conj(gp00)) * conj(gq00)
    + gp10 * w01 * (gq01 * conj(gp10) - gq11 * conj(gp00)) * conj(gq01)
    + gp11 * w10 * (gq00 * conj(gp11) - gq10 * conj(gp01)) * conj(gq00)
    + gp11 * w11 * (gq01 * conj(gp11) - gq11 * conj(gp01)) * conj(gq01)
  ).real


def CIRCULAR_VIS_I(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      -gp00 * v01 * conj(gq01)
      + gp00 * v11 * conj(gq00)
      + gp01 * v00 * conj(gq01)
      - gp01 * v10 * conj(gq00)
      - gp10 * v01 * conj(gq11)
      + gp10 * v11 * conj(gq10)
      + gp11 * v00 * conj(gq11)
      - gp11 * v10 * conj(gq10)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def CIRCULAR_VIS_Q(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      gp00 * v01 * conj(gq11)
      - gp00 * v11 * conj(gq10)
      - gp01 * v00 * conj(gq11)
      + gp01 * v10 * conj(gq10)
      + gp10 * v01 * conj(gq01)
      - gp10 * v11 * conj(gq00)
      - gp11 * v00 * conj(gq01)
      + gp11 * v10 * conj(gq00)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def CIRCULAR_VIS_U(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * 1j
    * (
      gp00 * v01 * conj(gq11)
      - gp00 * v11 * conj(gq10)
      - gp01 * v00 * conj(gq11)
      + gp01 * v10 * conj(gq10)
      - gp10 * v01 * conj(gq01)
      + gp10 * v11 * conj(gq00)
      + gp11 * v00 * conj(gq01)
      - gp11 * v10 * conj(gq00)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def CIRCULAR_VIS_V(v00, v01, v10, v11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11):
  return (
    0.5
    * (
      gp00 * v01 * conj(gq01)
      - gp00 * v11 * conj(gq00)
      - gp01 * v00 * conj(gq01)
      + gp01 * v10 * conj(gq00)
      - gp10 * v01 * conj(gq11)
      + gp10 * v11 * conj(gq10)
      + gp11 * v00 * conj(gq11)
      - gp11 * v10 * conj(gq10)
    )
    / (
      gp00 * gp11 * conj(gq00) * conj(gq11)
      - gp00 * gp11 * conj(gq01) * conj(gq10)
      - gp01 * gp10 * conj(gq00) * conj(gq11)
      + gp01 * gp10 * conj(gq01) * conj(gq10)
    )
  )


def CIRCULAR_WEIGHT_I(
  w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11
):
  return (
    gp00 * w00 * (gq00 * conj(gp00) + gq10 * conj(gp10)) * conj(gq00)
    + gp00 * w01 * (gq01 * conj(gp00) + gq11 * conj(gp10)) * conj(gq01)
    + gp01 * w10 * (gq00 * conj(gp01) + gq10 * conj(gp11)) * conj(gq00)
    + gp01 * w11 * (gq01 * conj(gp01) + gq11 * conj(gp11)) * conj(gq01)
    + gp10 * w00 * (gq00 * conj(gp00) + gq10 * conj(gp10)) * conj(gq10)
    + gp10 * w01 * (gq01 * conj(gp00) + gq11 * conj(gp10)) * conj(gq11)
    + gp11 * w10 * (gq00 * conj(gp01) + gq10 * conj(gp11)) * conj(gq10)
    + gp11 * w11 * (gq01 * conj(gp01) + gq11 * conj(gp11)) * conj(gq11)
  ).real


def CIRCULAR_WEIGHT_Q(
  w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11
):
  return (
    gp00 * w00 * (gq00 * conj(gp10) + gq10 * conj(gp00)) * conj(gq10)
    + gp00 * w01 * (gq01 * conj(gp10) + gq11 * conj(gp00)) * conj(gq11)
    + gp01 * w10 * (gq00 * conj(gp11) + gq10 * conj(gp01)) * conj(gq10)
    + gp01 * w11 * (gq01 * conj(gp11) + gq11 * conj(gp01)) * conj(gq11)
    + gp10 * w00 * (gq00 * conj(gp10) + gq10 * conj(gp00)) * conj(gq00)
    + gp10 * w01 * (gq01 * conj(gp10) + gq11 * conj(gp00)) * conj(gq01)
    + gp11 * w10 * (gq00 * conj(gp11) + gq10 * conj(gp01)) * conj(gq00)
    + gp11 * w11 * (gq01 * conj(gp11) + gq11 * conj(gp01)) * conj(gq01)
  ).real


def CIRCULAR_WEIGHT_U(
  w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11
):
  return (
    -gp00 * w00 * (gq00 * conj(gp10) - gq10 * conj(gp00)) * conj(gq10)
    - gp00 * w01 * (gq01 * conj(gp10) - gq11 * conj(gp00)) * conj(gq11)
    - gp01 * w10 * (gq00 * conj(gp11) - gq10 * conj(gp01)) * conj(gq10)
    - gp01 * w11 * (gq01 * conj(gp11) - gq11 * conj(gp01)) * conj(gq11)
    + gp10 * w00 * (gq00 * conj(gp10) - gq10 * conj(gp00)) * conj(gq00)
    + gp10 * w01 * (gq01 * conj(gp10) - gq11 * conj(gp00)) * conj(gq01)
    + gp11 * w10 * (gq00 * conj(gp11) - gq10 * conj(gp01)) * conj(gq00)
    + gp11 * w11 * (gq01 * conj(gp11) - gq11 * conj(gp01)) * conj(gq01)
  ).real


def CIRCULAR_WEIGHT_V(
  w00, w01, w10, w11, gp00, gp01, gp10, gp11, gq00, gq01, gq10, gq11
):
  return (
    gp00 * w00 * (gq00 * conj(gp00) - gq10 * conj(gp10)) * conj(gq00)
    + gp00 * w01 * (gq01 * conj(gp00) - gq11 * conj(gp10)) * conj(gq01)
    + gp01 * w10 * (gq00 * conj(gp01) - gq10 * conj(gp11)) * conj(gq00)
    + gp01 * w11 * (gq01 * conj(gp01) - gq11 * conj(gp11)) * conj(gq01)
    - gp10 * w00 * (gq00 * conj(gp00) - gq10 * conj(gp10)) * conj(gq10)
    - gp10 * w01 * (gq01 * conj(gp00) - gq11 * conj(gp10)) * conj(gq11)
    - gp11 * w10 * (gq00 * conj(gp01) - gq10 * conj(gp11)) * conj(gq10)
    - gp11 * w11 * (gq01 * conj(gp01) - gq11 * conj(gp11)) * conj(gq11)
  ).real


VIS_FNS = {
  "LINEAR": {
    "I": LINEAR_VIS_I,
    "Q": LINEAR_VIS_Q,
    "U": LINEAR_VIS_U,
    "V": LINEAR_VIS_V,
  },
  "CIRCULAR": {
    "I": CIRCULAR_VIS_I,
    "Q": CIRCULAR_VIS_Q,
    "U": CIRCULAR_VIS_U,
    "V": CIRCULAR_VIS_V,
  },
}

WEIGHT_FNS = {
  "LINEAR": {
    "I": LINEAR_WEIGHT_I,
    "Q": LINEAR_WEIGHT_Q,
    "U": LINEAR_WEIGHT_U,
    "V": LINEAR_WEIGHT_V,
  },
  "CIRCULAR": {
    "I": CIRCULAR_WEIGHT_I,
    "Q": CIRCULAR_WEIGHT_Q,
    "U": CIRCULAR_WEIGHT_U,
    "V": CIRCULAR_WEIGHT_V,
  },
}
