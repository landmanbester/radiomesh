# This file is automatically generated
# via the `radiomesh gen-expr` command.
# It should not be directly modified.

from numpy import conjugate as conj


def LINEAR_VIS_JONES_I(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      -jp00 * v10 * conj(jq10)
      + jp00 * v11 * conj(jq00)
      - jp01 * v10 * conj(jq11)
      + jp01 * v11 * conj(jq01)
      + jp10 * v00 * conj(jq10)
      - jp10 * v01 * conj(jq00)
      + jp11 * v00 * conj(jq11)
      - jp11 * v01 * conj(jq01)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def LINEAR_VIS_JONES_Q(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      jp00 * v10 * conj(jq10)
      - jp00 * v11 * conj(jq00)
      - jp01 * v10 * conj(jq11)
      + jp01 * v11 * conj(jq01)
      - jp10 * v00 * conj(jq10)
      + jp10 * v01 * conj(jq00)
      + jp11 * v00 * conj(jq11)
      - jp11 * v01 * conj(jq01)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def LINEAR_VIS_JONES_U(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      jp00 * v10 * conj(jq11)
      - jp00 * v11 * conj(jq01)
      + jp01 * v10 * conj(jq10)
      - jp01 * v11 * conj(jq00)
      - jp10 * v00 * conj(jq11)
      + jp10 * v01 * conj(jq01)
      - jp11 * v00 * conj(jq10)
      + jp11 * v01 * conj(jq00)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def LINEAR_VIS_JONES_V(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * 1j
    * (
      jp00 * v10 * conj(jq11)
      - jp00 * v11 * conj(jq01)
      - jp01 * v10 * conj(jq10)
      + jp01 * v11 * conj(jq00)
      - jp10 * v00 * conj(jq11)
      + jp10 * v01 * conj(jq01)
      + jp11 * v00 * conj(jq10)
      - jp11 * v01 * conj(jq00)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def LINEAR_WEIGHT_JONES_I(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp00) + jq01 * conj(jp01)) * conj(jq00)
    + jp00 * w01 * (jq10 * conj(jp00) + jq11 * conj(jp01)) * conj(jq10)
    + jp01 * w00 * (jq00 * conj(jp00) + jq01 * conj(jp01)) * conj(jq01)
    + jp01 * w01 * (jq10 * conj(jp00) + jq11 * conj(jp01)) * conj(jq11)
    + jp10 * w10 * (jq00 * conj(jp10) + jq01 * conj(jp11)) * conj(jq00)
    + jp10 * w11 * (jq10 * conj(jp10) + jq11 * conj(jp11)) * conj(jq10)
    + jp11 * w10 * (jq00 * conj(jp10) + jq01 * conj(jp11)) * conj(jq01)
    + jp11 * w11 * (jq10 * conj(jp10) + jq11 * conj(jp11)) * conj(jq11)
  ).real


def LINEAR_WEIGHT_JONES_Q(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp00) - jq01 * conj(jp01)) * conj(jq00)
    + jp00 * w01 * (jq10 * conj(jp00) - jq11 * conj(jp01)) * conj(jq10)
    - jp01 * w00 * (jq00 * conj(jp00) - jq01 * conj(jp01)) * conj(jq01)
    - jp01 * w01 * (jq10 * conj(jp00) - jq11 * conj(jp01)) * conj(jq11)
    + jp10 * w10 * (jq00 * conj(jp10) - jq01 * conj(jp11)) * conj(jq00)
    + jp10 * w11 * (jq10 * conj(jp10) - jq11 * conj(jp11)) * conj(jq10)
    - jp11 * w10 * (jq00 * conj(jp10) - jq01 * conj(jp11)) * conj(jq01)
    - jp11 * w11 * (jq10 * conj(jp10) - jq11 * conj(jp11)) * conj(jq11)
  ).real


def LINEAR_WEIGHT_JONES_U(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp01) + jq01 * conj(jp00)) * conj(jq01)
    + jp00 * w01 * (jq10 * conj(jp01) + jq11 * conj(jp00)) * conj(jq11)
    + jp01 * w00 * (jq00 * conj(jp01) + jq01 * conj(jp00)) * conj(jq00)
    + jp01 * w01 * (jq10 * conj(jp01) + jq11 * conj(jp00)) * conj(jq10)
    + jp10 * w10 * (jq00 * conj(jp11) + jq01 * conj(jp10)) * conj(jq01)
    + jp10 * w11 * (jq10 * conj(jp11) + jq11 * conj(jp10)) * conj(jq11)
    + jp11 * w10 * (jq00 * conj(jp11) + jq01 * conj(jp10)) * conj(jq00)
    + jp11 * w11 * (jq10 * conj(jp11) + jq11 * conj(jp10)) * conj(jq10)
  ).real


def LINEAR_WEIGHT_JONES_V(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    -jp00 * w00 * (jq00 * conj(jp01) - jq01 * conj(jp00)) * conj(jq01)
    - jp00 * w01 * (jq10 * conj(jp01) - jq11 * conj(jp00)) * conj(jq11)
    + jp01 * w00 * (jq00 * conj(jp01) - jq01 * conj(jp00)) * conj(jq00)
    + jp01 * w01 * (jq10 * conj(jp01) - jq11 * conj(jp00)) * conj(jq10)
    - jp10 * w10 * (jq00 * conj(jp11) - jq01 * conj(jp10)) * conj(jq01)
    - jp10 * w11 * (jq10 * conj(jp11) - jq11 * conj(jp10)) * conj(jq11)
    + jp11 * w10 * (jq00 * conj(jp11) - jq01 * conj(jp10)) * conj(jq00)
    + jp11 * w11 * (jq10 * conj(jp11) - jq11 * conj(jp10)) * conj(jq10)
  ).real


def LINEAR_VIS_NOJONES_I(v00, v01, v10, v11):
  return 0.5 * v00 + 0.5 * v11


def LINEAR_VIS_NOJONES_Q(v00, v01, v10, v11):
  return 0.5 * v00 - 0.5 * v11


def LINEAR_VIS_NOJONES_U(v00, v01, v10, v11):
  return 0.5 * v01 + 0.5 * v10


def LINEAR_VIS_NOJONES_V(v00, v01, v10, v11):
  return 0.5 * 1j * (-v01 + v10)


def LINEAR_WEIGHT_NOJONES_I(w00, w01, w10, w11):
  return (w00 + w11).real


def LINEAR_WEIGHT_NOJONES_Q(w00, w01, w10, w11):
  return (w00 + w11).real


def LINEAR_WEIGHT_NOJONES_U(w00, w01, w10, w11):
  return (w01 + w10).real


def LINEAR_WEIGHT_NOJONES_V(w00, w01, w10, w11):
  return (w01 + w10).real


def CIRCULAR_VIS_JONES_I(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      -jp00 * v10 * conj(jq10)
      + jp00 * v11 * conj(jq00)
      - jp01 * v10 * conj(jq11)
      + jp01 * v11 * conj(jq01)
      + jp10 * v00 * conj(jq10)
      - jp10 * v01 * conj(jq00)
      + jp11 * v00 * conj(jq11)
      - jp11 * v01 * conj(jq01)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def CIRCULAR_VIS_JONES_Q(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      jp00 * v10 * conj(jq11)
      - jp00 * v11 * conj(jq01)
      + jp01 * v10 * conj(jq10)
      - jp01 * v11 * conj(jq00)
      - jp10 * v00 * conj(jq11)
      + jp10 * v01 * conj(jq01)
      - jp11 * v00 * conj(jq10)
      + jp11 * v01 * conj(jq00)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def CIRCULAR_VIS_JONES_U(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * 1j
    * (
      jp00 * v10 * conj(jq11)
      - jp00 * v11 * conj(jq01)
      - jp01 * v10 * conj(jq10)
      + jp01 * v11 * conj(jq00)
      - jp10 * v00 * conj(jq11)
      + jp10 * v01 * conj(jq01)
      + jp11 * v00 * conj(jq10)
      - jp11 * v01 * conj(jq00)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def CIRCULAR_VIS_JONES_V(
  v00, v01, v10, v11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    0.5
    * (
      jp00 * v10 * conj(jq10)
      - jp00 * v11 * conj(jq00)
      - jp01 * v10 * conj(jq11)
      + jp01 * v11 * conj(jq01)
      - jp10 * v00 * conj(jq10)
      + jp10 * v01 * conj(jq00)
      + jp11 * v00 * conj(jq11)
      - jp11 * v01 * conj(jq01)
    )
    / (
      jp00 * jp11 * conj(jq00) * conj(jq11)
      - jp00 * jp11 * conj(jq01) * conj(jq10)
      - jp01 * jp10 * conj(jq00) * conj(jq11)
      + jp01 * jp10 * conj(jq01) * conj(jq10)
    )
  )


def CIRCULAR_WEIGHT_JONES_I(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp00) + jq01 * conj(jp01)) * conj(jq00)
    + jp00 * w01 * (jq10 * conj(jp00) + jq11 * conj(jp01)) * conj(jq10)
    + jp01 * w00 * (jq00 * conj(jp00) + jq01 * conj(jp01)) * conj(jq01)
    + jp01 * w01 * (jq10 * conj(jp00) + jq11 * conj(jp01)) * conj(jq11)
    + jp10 * w10 * (jq00 * conj(jp10) + jq01 * conj(jp11)) * conj(jq00)
    + jp10 * w11 * (jq10 * conj(jp10) + jq11 * conj(jp11)) * conj(jq10)
    + jp11 * w10 * (jq00 * conj(jp10) + jq01 * conj(jp11)) * conj(jq01)
    + jp11 * w11 * (jq10 * conj(jp10) + jq11 * conj(jp11)) * conj(jq11)
  ).real


def CIRCULAR_WEIGHT_JONES_Q(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp01) + jq01 * conj(jp00)) * conj(jq01)
    + jp00 * w01 * (jq10 * conj(jp01) + jq11 * conj(jp00)) * conj(jq11)
    + jp01 * w00 * (jq00 * conj(jp01) + jq01 * conj(jp00)) * conj(jq00)
    + jp01 * w01 * (jq10 * conj(jp01) + jq11 * conj(jp00)) * conj(jq10)
    + jp10 * w10 * (jq00 * conj(jp11) + jq01 * conj(jp10)) * conj(jq01)
    + jp10 * w11 * (jq10 * conj(jp11) + jq11 * conj(jp10)) * conj(jq11)
    + jp11 * w10 * (jq00 * conj(jp11) + jq01 * conj(jp10)) * conj(jq00)
    + jp11 * w11 * (jq10 * conj(jp11) + jq11 * conj(jp10)) * conj(jq10)
  ).real


def CIRCULAR_WEIGHT_JONES_U(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    -jp00 * w00 * (jq00 * conj(jp01) - jq01 * conj(jp00)) * conj(jq01)
    - jp00 * w01 * (jq10 * conj(jp01) - jq11 * conj(jp00)) * conj(jq11)
    + jp01 * w00 * (jq00 * conj(jp01) - jq01 * conj(jp00)) * conj(jq00)
    + jp01 * w01 * (jq10 * conj(jp01) - jq11 * conj(jp00)) * conj(jq10)
    - jp10 * w10 * (jq00 * conj(jp11) - jq01 * conj(jp10)) * conj(jq01)
    - jp10 * w11 * (jq10 * conj(jp11) - jq11 * conj(jp10)) * conj(jq11)
    + jp11 * w10 * (jq00 * conj(jp11) - jq01 * conj(jp10)) * conj(jq00)
    + jp11 * w11 * (jq10 * conj(jp11) - jq11 * conj(jp10)) * conj(jq10)
  ).real


def CIRCULAR_WEIGHT_JONES_V(
  w00, w01, w10, w11, jp00, jp01, jp10, jp11, jq00, jq01, jq10, jq11
):
  return (
    jp00 * w00 * (jq00 * conj(jp00) - jq01 * conj(jp01)) * conj(jq00)
    + jp00 * w01 * (jq10 * conj(jp00) - jq11 * conj(jp01)) * conj(jq10)
    - jp01 * w00 * (jq00 * conj(jp00) - jq01 * conj(jp01)) * conj(jq01)
    - jp01 * w01 * (jq10 * conj(jp00) - jq11 * conj(jp01)) * conj(jq11)
    + jp10 * w10 * (jq00 * conj(jp10) - jq01 * conj(jp11)) * conj(jq00)
    + jp10 * w11 * (jq10 * conj(jp10) - jq11 * conj(jp11)) * conj(jq10)
    - jp11 * w10 * (jq00 * conj(jp10) - jq01 * conj(jp11)) * conj(jq01)
    - jp11 * w11 * (jq10 * conj(jp10) - jq11 * conj(jp11)) * conj(jq11)
  ).real


def CIRCULAR_VIS_NOJONES_I(v00, v01, v10, v11):
  return 0.5 * v00 + 0.5 * v11


def CIRCULAR_VIS_NOJONES_Q(v00, v01, v10, v11):
  return 0.5 * v01 + 0.5 * v10


def CIRCULAR_VIS_NOJONES_U(v00, v01, v10, v11):
  return 0.5 * 1j * (-v01 + v10)


def CIRCULAR_VIS_NOJONES_V(v00, v01, v10, v11):
  return 0.5 * v00 - 0.5 * v11


def CIRCULAR_WEIGHT_NOJONES_I(w00, w01, w10, w11):
  return (w00 + w11).real


def CIRCULAR_WEIGHT_NOJONES_Q(w00, w01, w10, w11):
  return (w01 + w10).real


def CIRCULAR_WEIGHT_NOJONES_U(w00, w01, w10, w11):
  return (w01 + w10).real


def CIRCULAR_WEIGHT_NOJONES_V(w00, w01, w10, w11):
  return (w00 + w11).real


CONVERT_FNS = {
  ("VIS", "LINEAR", "JONES", "I"): LINEAR_VIS_JONES_I,
  ("VIS", "LINEAR", "JONES", "Q"): LINEAR_VIS_JONES_Q,
  ("VIS", "LINEAR", "JONES", "U"): LINEAR_VIS_JONES_U,
  ("VIS", "LINEAR", "JONES", "V"): LINEAR_VIS_JONES_V,
  ("WEIGHT", "LINEAR", "JONES", "I"): LINEAR_WEIGHT_JONES_I,
  ("WEIGHT", "LINEAR", "JONES", "Q"): LINEAR_WEIGHT_JONES_Q,
  ("WEIGHT", "LINEAR", "JONES", "U"): LINEAR_WEIGHT_JONES_U,
  ("WEIGHT", "LINEAR", "JONES", "V"): LINEAR_WEIGHT_JONES_V,
  ("VIS", "LINEAR", "NOJONES", "I"): LINEAR_VIS_NOJONES_I,
  ("VIS", "LINEAR", "NOJONES", "Q"): LINEAR_VIS_NOJONES_Q,
  ("VIS", "LINEAR", "NOJONES", "U"): LINEAR_VIS_NOJONES_U,
  ("VIS", "LINEAR", "NOJONES", "V"): LINEAR_VIS_NOJONES_V,
  ("WEIGHT", "LINEAR", "NOJONES", "I"): LINEAR_WEIGHT_NOJONES_I,
  ("WEIGHT", "LINEAR", "NOJONES", "Q"): LINEAR_WEIGHT_NOJONES_Q,
  ("WEIGHT", "LINEAR", "NOJONES", "U"): LINEAR_WEIGHT_NOJONES_U,
  ("WEIGHT", "LINEAR", "NOJONES", "V"): LINEAR_WEIGHT_NOJONES_V,
  ("VIS", "CIRCULAR", "JONES", "I"): CIRCULAR_VIS_JONES_I,
  ("VIS", "CIRCULAR", "JONES", "Q"): CIRCULAR_VIS_JONES_Q,
  ("VIS", "CIRCULAR", "JONES", "U"): CIRCULAR_VIS_JONES_U,
  ("VIS", "CIRCULAR", "JONES", "V"): CIRCULAR_VIS_JONES_V,
  ("WEIGHT", "CIRCULAR", "JONES", "I"): CIRCULAR_WEIGHT_JONES_I,
  ("WEIGHT", "CIRCULAR", "JONES", "Q"): CIRCULAR_WEIGHT_JONES_Q,
  ("WEIGHT", "CIRCULAR", "JONES", "U"): CIRCULAR_WEIGHT_JONES_U,
  ("WEIGHT", "CIRCULAR", "JONES", "V"): CIRCULAR_WEIGHT_JONES_V,
  ("VIS", "CIRCULAR", "NOJONES", "I"): CIRCULAR_VIS_NOJONES_I,
  ("VIS", "CIRCULAR", "NOJONES", "Q"): CIRCULAR_VIS_NOJONES_Q,
  ("VIS", "CIRCULAR", "NOJONES", "U"): CIRCULAR_VIS_NOJONES_U,
  ("VIS", "CIRCULAR", "NOJONES", "V"): CIRCULAR_VIS_NOJONES_V,
  ("WEIGHT", "CIRCULAR", "NOJONES", "I"): CIRCULAR_WEIGHT_NOJONES_I,
  ("WEIGHT", "CIRCULAR", "NOJONES", "Q"): CIRCULAR_WEIGHT_NOJONES_Q,
  ("WEIGHT", "CIRCULAR", "NOJONES", "U"): CIRCULAR_WEIGHT_NOJONES_U,
  ("WEIGHT", "CIRCULAR", "NOJONES", "V"): CIRCULAR_WEIGHT_NOJONES_V,
}
